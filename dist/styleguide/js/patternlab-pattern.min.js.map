{"version":3,"file":"patternlab-pattern.min.js","sources":["webpack:///webpack/bootstrap 7cfb530e4ba0da751115?fcfe","webpack:///./src/scripts/libs/url-handler/index.js?b6fd","webpack:///./src/scripts/patternlab-pattern.js","webpack:///./src/scripts/modules/modal-styleguide/index.js","webpack:///./src/scripts/modules/panels-util/index.js?2b59","webpack:///./src/scripts/libs/postmessage/index.js?2c4d"],"sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 15);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 7cfb530e4ba0da751115","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/*!\n * URL Handler\n *\n * Copyright (c) 2013-2014 Dave Olsen, http://dmolsen.com\n * Licensed under the MIT license\n *\n * Helps handle the initial iFrame source. Parses a string to see if it matches\n * an expected pattern in Pattern Lab. Supports Pattern Labs fuzzy pattern partial\n * matching style.\n *\n */\n\nconst urlHandler = exports.urlHandler = {\n  // \n  // var urlHandler = {\n\n  // set-up some default vars\n  skipBack: false,\n  targetOrigin: window.location.protocol == \"file:\" ? \"*\" : window.location.protocol + \"//\" + window.location.host,\n\n  /**\n  * get the real file name for a given pattern name\n  * @param  {String}       the shorthand partials syntax for a given pattern\n  * @param  {Boolean}      with the file name should be returned with the full rendered suffix or not\n  *\n  * @return {String}       the real file path\n  */\n  getFileName: function (name, withRenderedSuffix) {\n\n    var baseDir = \"patterns\";\n    var fileName = \"\";\n\n    if (name === undefined) {\n      return fileName;\n    }\n\n    if (withRenderedSuffix === undefined) {\n      withRenderedSuffix = true;\n    }\n\n    if (name == \"all\") {\n      return \"styleguide/html/styleguide.html\";\n    } else if (name == \"snapshots\") {\n      return \"snapshots/index.html\";\n    }\n\n    var paths = name.indexOf(\"viewall-\") != -1 ? viewAllPaths : patternPaths;\n    var nameClean = name.replace(\"viewall-\", \"\");\n\n    // look at this as a regular pattern\n    var bits = this.getPatternInfo(nameClean, paths);\n    var patternType = bits[0];\n    var pattern = bits[1];\n\n    if (paths[patternType] !== undefined && paths[patternType][pattern] !== undefined) {\n\n      fileName = paths[patternType][pattern];\n    } else if (paths[patternType] !== undefined) {\n\n      for (var patternMatchKey in paths[patternType]) {\n        if (patternMatchKey.indexOf(pattern) != -1) {\n          fileName = paths[patternType][patternMatchKey];\n          break;\n        }\n      }\n    }\n\n    if (fileName === \"\") {\n      return fileName;\n    }\n\n    var regex = /\\//g;\n    if (name.indexOf(\"viewall-\") !== -1 && name.indexOf(\"viewall-\") === 0 && fileName !== \"\") {\n      fileName = baseDir + \"/\" + fileName.replace(regex, \"-\") + \"/index.html\";\n    } else if (fileName !== \"\") {\n      fileName = baseDir + \"/\" + fileName.replace(regex, \"-\") + \"/\" + fileName.replace(regex, \"-\");\n      if (withRenderedSuffix) {\n        var fileSuffixRendered = config.outputFileSuffixes !== undefined && config.outputFileSuffixes.rendered !== undefined ? config.outputFileSuffixes.rendered : '';\n        fileName = fileName + fileSuffixRendered + \".html\";\n      }\n    }\n\n    return fileName;\n  },\n\n  /**\n  * break up a pattern into its parts, pattern type and pattern name\n  * @param  {String}       the shorthand partials syntax for a given pattern\n  * @param  {Object}       the paths to be compared\n  *\n  * @return {Array}        the pattern type and pattern name\n  */\n  getPatternInfo: function (name, paths) {\n\n    var patternBits = name.split(\"-\");\n\n    var i = 1;\n    var c = patternBits.length;\n\n    var patternType = patternBits[0];\n    while (paths[patternType] === undefined && i < c) {\n      patternType += \"-\" + patternBits[i];\n      i++;\n    }\n\n    var pattern = name.slice(patternType.length + 1, name.length);\n\n    return [patternType, pattern];\n  },\n\n  /**\n  * search the request vars for a particular item\n  *\n  * @return {Object}       a search of the window.location.search vars\n  */\n  getRequestVars: function () {\n\n    // the following is taken from https://developer.mozilla.org/en-US/docs/Web/API/window.location\n    var oGetVars = new function (sSearch) {\n      if (sSearch.length > 1) {\n        for (var aItKey, nKeyId = 0, aCouples = sSearch.substr(1).split(\"&\"); nKeyId < aCouples.length; nKeyId++) {\n          aItKey = aCouples[nKeyId].split(\"=\");\n          this[unescape(aItKey[0])] = aItKey.length > 1 ? unescape(aItKey[1]) : \"\";\n        }\n      }\n    }(window.location.search);\n\n    return oGetVars;\n  },\n\n  /**\n  * push a pattern onto the current history based on a click\n  * @param  {String}       the shorthand partials syntax for a given pattern\n  * @param  {String}       the path given by the loaded iframe\n  */\n  pushPattern: function (pattern, givenPath) {\n    var data = { \"pattern\": pattern };\n    var fileName = urlHandler.getFileName(pattern);\n    var path = window.location.pathname;\n    path = window.location.protocol === \"file\" ? path.replace(\"/public/index.html\", \"public/\") : path.replace(/\\/index\\.html/, \"/\");\n    var expectedPath = window.location.protocol + \"//\" + window.location.host + path + fileName;\n    if (givenPath != expectedPath) {\n      // make sure to update the iframe because there was a click\n      var obj = JSON.stringify({ \"event\": \"patternLab.updatePath\", \"path\": fileName });\n      document.getElementById(\"sg-viewport\").contentWindow.postMessage(obj, urlHandler.targetOrigin);\n    } else {\n      // add to the history\n      var addressReplacement = window.location.protocol == \"file:\" ? null : window.location.protocol + \"//\" + window.location.host + window.location.pathname.replace(\"index.html\", \"\") + \"?p=\" + pattern;\n      if (history.pushState !== undefined) {\n        history.pushState(data, null, addressReplacement);\n      }\n      document.getElementById(\"title\").innerHTML = \"Pattern Lab - \" + pattern;\n      if (document.getElementById(\"sg-raw\") !== null) {\n        document.getElementById(\"sg-raw\").setAttribute(\"href\", urlHandler.getFileName(pattern));\n      }\n    }\n  },\n\n  /**\n  * based on a click forward or backward modify the url and iframe source\n  * @param  {Object}      event info like state and properties set in pushState()\n  */\n  popPattern: function (e) {\n\n    var patternName;\n    var state = e.state;\n\n    if (state === null) {\n      this.skipBack = false;\n      return;\n    } else if (state !== null) {\n      patternName = state.pattern;\n    }\n\n    var iFramePath = \"\";\n    iFramePath = this.getFileName(patternName);\n    if (iFramePath === \"\") {\n      iFramePath = \"styleguide/html/styleguide.html\";\n    }\n\n    var obj = JSON.stringify({ \"event\": \"patternLab.updatePath\", \"path\": iFramePath });\n    document.getElementById(\"sg-viewport\").contentWindow.postMessage(obj, urlHandler.targetOrigin);\n    document.getElementById(\"title\").innerHTML = \"Pattern Lab - \" + patternName;\n    if (document.getElementById(\"sg-raw\") !== null) {\n      document.getElementById(\"sg-raw\").setAttribute(\"href\", urlHandler.getFileName(patternName));\n    }\n\n    /*\n    if (wsnConnected !== undefined) {\n      wsn.send( '{\"url\": \"'+iFramePath+'\", \"patternpartial\": \"'+patternName+'\" }' );\n    }\n    */\n  }\n\n};\n\n/**\n* handle the onpopstate event\n*/\nwindow.onpopstate = function (event) {\n  urlHandler.skipBack = true;\n  urlHandler.popPattern(event);\n};\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/scripts/libs/url-handler/index.js\n// module id = 0\n// module chunks = 0 1","'use strict';\n\nrequire('postmessage');\nrequire('panels-util');\nrequire('modal-styleguide');\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/scripts/patternlab-pattern.js\n// module id = 15\n// module chunks = 1","'use strict';\n\n/*!\n* Modal for the Styleguide Layer\n* For both annotations and code/info\n*\n* Copyright (c) 2016 Dave Olsen, http://dmolsen.com\n* Licensed under the MIT license\n*\n* @requires panels-util.js\n* @requires url-handler.js\n*\n*/\n\nconst panelsUtil = require('panels-util');\nrequire('url-handler');\n\nvar modalStyleguide = {\n\n  // set up some defaults\n  active: [],\n  targetOrigin: window.location.protocol === 'file:' ? '*' : window.location.protocol + '//' + window.location.host,\n\n  /**\n  * initialize the modal window\n  */\n  onReady: function () {\n\n    // go through the panel toggles and add click event\n    var els = document.querySelectorAll('.sg-pattern-extra-toggle');\n    for (var i = 0; i < els.length; ++i) {\n      els[i].onclick = function (e) {\n        e.preventDefault();\n        var patternPartial = this.getAttribute('data-patternpartial');\n        modalStyleguide.toggle(patternPartial);\n      };\n    }\n  },\n\n  /**\n  * toggle the modal window open and closed based on clicking the pip\n  * @param  {String}       the patternPartial that identifies what needs to be toggled\n  */\n  toggle: function (patternPartial) {\n    if (modalStyleguide.active[patternPartial] === undefined || !modalStyleguide.active[patternPartial]) {\n      var el = document.getElementById('sg-pattern-data-' + patternPartial);\n      modalStyleguide.collectAndSend(el, true, false);\n    } else {\n      modalStyleguide.highlightsHide();\n      modalStyleguide.close(patternPartial);\n    }\n  },\n\n  /**\n  * open the modal window for a view-all entry\n  * @param  {String}       the patternPartial that identifies what needs to be opened\n  * @param  {String}       the content that should be inserted\n  */\n  open: function (patternPartial, content) {\n\n    // make sure templateRendered is modified to be an HTML element\n    var div = document.createElement('div');\n    div.innerHTML = content;\n    content = document.createElement('div').appendChild(div).querySelector('div');\n\n    // add click events\n    content = panelsUtil.addClickEvents(content, patternPartial);\n\n    // make sure the modal viewer and other options are off just in case\n    modalStyleguide.close(patternPartial);\n\n    // note it's turned on in the viewer\n    modalStyleguide.active[patternPartial] = true;\n\n    // make sure there's no content\n    div = document.getElementById('sg-pattern-extra-' + patternPartial);\n    if (div.childNodes.length > 0) {\n      div.removeChild(div.childNodes[0]);\n    }\n\n    // add the content\n    document.getElementById('sg-pattern-extra-' + patternPartial).appendChild(content);\n\n    // show the modal\n    document.getElementById('sg-pattern-extra-toggle-' + patternPartial).classList.add('active');\n    document.getElementById('sg-pattern-extra-' + patternPartial).classList.add('active');\n  },\n\n  /**\n  * close the modal window for a view-all entry\n  * @param  {String}       the patternPartial that identifies what needs to be closed\n  */\n  close: function (patternPartial) {\n\n    // not that the modal viewer is no longer active\n    modalStyleguide.active[patternPartial] = false;\n\n    // hide the modal, look at info-panel.js\n    document.getElementById('sg-pattern-extra-toggle-' + patternPartial).classList.remove('active');\n    document.getElementById('sg-pattern-extra-' + patternPartial).classList.remove('active');\n  },\n\n  /**\n  * get the data that needs to be send to the viewer for rendering\n  * @param  {Element}      the identifier for the element that needs to be collected\n  * @param  {Boolean}      if the refresh is of a view-all view and the content should be sent back\n  * @param  {Boolean}      if the text in the dropdown should be switched\n  */\n  collectAndSend: function (el, iframePassback, switchText) {\n    var patternData = JSON.parse(el.innerHTML);\n    if (patternData.patternName !== undefined) {\n      var patternMarkupEl = document.querySelector('#' + patternData.patternPartial + ' > .sg-pattern-example');\n      patternData.patternMarkup = patternMarkupEl !== null ? patternMarkupEl.innerHTML : document.querySelector('body').innerHTML;\n      modalStyleguide.patternQueryInfo(patternData, iframePassback, switchText);\n    }\n  },\n\n  /**\n  * hide the highlights\n  */\n  highlightsHide: function (patternPartial) {\n    var patternPartialSelector = patternPartial !== undefined ? '#' + patternPartial + \" > \" : \"\";\n    var elsToHide = document.querySelectorAll(patternPartialSelector + '.has-annotation');\n    for (var i = 0; i < elsToHide.length; i++) {\n      elsToHide[i].classList.remove('has-annotation');\n    }\n    elsToHide = document.querySelectorAll(patternPartialSelector + '.annotation-tip');\n    for (i = 0; i < elsToHide.length; i++) {\n      elsToHide[i].style.display = 'none';\n    }\n  },\n\n  /**\n  * return the pattern info to the top level\n  * @param  {Object}       the content that will be sent to the viewer for rendering\n  * @param  {Boolean}      if the refresh is of a view-all view and the content should be sent back\n  * @param  {Boolean}      if the text in the dropdown should be switched\n  */\n  patternQueryInfo: function (patternData, iframePassback, switchText) {\n\n    // send a message to the pattern\n    try {\n      var obj = JSON.stringify({ 'event': 'patternLab.patternQueryInfo', 'patternData': patternData, 'iframePassback': iframePassback, 'switchText': switchText });\n      parent.postMessage(obj, modalStyleguide.targetOrigin);\n    } catch (e) {}\n  },\n\n  /**\n  * toggle the comment pop-up based on a user clicking on the pattern\n  * based on the great MDN docs at https://developer.mozilla.org/en-US/docs/Web/API/window.postMessage\n  * @param  {Object}      event info\n  */\n  receiveIframeMessage: function (event) {\n\n    var i;\n\n    // does the origin sending the message match the current host? if not dev/null the request\n    if (window.location.protocol !== 'file:' && event.origin !== window.location.protocol + '//' + window.location.host) {\n      return;\n    }\n\n    var data = {};\n    try {\n      data = typeof event.data !== 'string' ? event.data : JSON.parse(event.data);\n    } catch (e) {}\n\n    // see if it got a path to replace\n    if (data.event !== undefined && data.event == 'patternLab.patternQuery') {\n\n      var els, iframePassback, patternData, patternMarkupEl;\n\n      // find all elements related to pattern info\n      els = document.querySelectorAll('.sg-pattern-data');\n      iframePassback = els.length > 1;\n\n      // send each up to the parent to be read and compiled into panels\n      for (i = 0; i < els.length; i++) {\n        modalStyleguide.collectAndSend(els[i], iframePassback, data.switchText);\n      }\n    } else if (data.event !== undefined && data.event == 'patternLab.patternModalInsert') {\n\n      // insert the previously rendered content being passed from the iframe\n      modalStyleguide.open(data.patternPartial, data.modalContent);\n    } else if (data.event !== undefined && data.event == 'patternLab.annotationsHighlightShow') {\n\n      var elsToHighlight, j, item, span;\n\n      // go over the supplied annotations\n      for (i = 0; i < data.annotations.length; i++) {\n\n        item = data.annotations[i];\n        elsToHighlight = document.querySelectorAll(item.el);\n\n        if (elsToHighlight.length > 0) {\n\n          for (j = 0; j < elsToHighlight.length; j++) {\n\n            elsToHighlight[j].classList.add('has-annotation');\n\n            span = document.createElement('span');\n            span.innerHTML = item.displayNumber;\n            span.classList.add('annotation-tip');\n\n            if (window.getComputedStyle(elsToHighlight[j], null).getPropertyValue('max-height') == '0px') {\n              span.style.display = 'none';\n            }\n\n            var annotationTip = document.querySelector(item.el + ' > span.annotation-tip');\n            if (annotationTip === null) {\n              elsToHighlight[j].insertBefore(span, elsToHighlight[j].firstChild);\n            } else {\n              annotationTip.style.display = 'inline';\n            }\n\n            elsToHighlight[j].onclick = function (item) {\n              return function (e) {\n                e.preventDefault();\n                e.stopPropagation();\n                var obj = JSON.stringify({ 'event': 'patternLab.annotationNumberClicked', 'displayNumber': item.displayNumber });\n                parent.postMessage(obj, modalStyleguide.targetOrigin);\n              };\n            }(item);\n          }\n        }\n      }\n    } else if (data.event !== undefined && data.event == 'patternLab.annotationsHighlightHide') {\n\n      modalStyleguide.highlightsHide();\n    } else if (data.event !== undefined && data.event == 'patternLab.patternModalClose') {\n\n      var keys = [];\n      for (var k in modalStyleguide.active) {\n        keys.push(k);\n      }\n      for (i = 0; i < keys.length; i++) {\n        var patternPartial = keys[i];\n        if (modalStyleguide.active[patternPartial]) {\n          modalStyleguide.close(patternPartial);\n        }\n      }\n    }\n  }\n\n};\n\n// when the document is ready make sure the modal is ready\nmodalStyleguide.onReady();\nwindow.addEventListener('message', modalStyleguide.receiveIframeMessage, false);\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/scripts/modules/modal-styleguide/index.js\n// module id = 16\n// module chunks = 1","'use strict';\n\n/*!\n * Panels Util\n * For both styleguide and viewer\n *\n * Copyright (c) 2013-16 Brad Frost, http://bradfrostweb.com & Dave Olsen, http://dmolsen.com\n * Licensed under the MIT license\n *\n * @requires url-handler.js\n *\n */\n\nrequire('url-handler');\n\nvar panelsUtil = {\n\n  /**\n  * Add click events to the template that was rendered\n  * @param  {String}      the rendered template for the modal\n  * @param  {String}      the pattern partial for the modal\n  */\n  addClickEvents: function (templateRendered, patternPartial) {\n\n    var els = templateRendered.querySelectorAll('#sg-' + patternPartial + '-tabs li');\n    for (var i = 0; i < els.length; ++i) {\n      els[i].onclick = function (e) {\n        e.preventDefault();\n        var patternPartial = this.getAttribute('data-patternpartial');\n        var panelID = this.getAttribute('data-panelid');\n        panelsUtil.show(patternPartial, panelID);\n      };\n    }\n\n    return templateRendered;\n  },\n\n  /**\n  * Show a specific modal\n  * @param  {String}      the pattern partial for the modal\n  * @param  {String}      the ID of the panel to be shown\n  */\n  show: function (patternPartial, panelID) {\n\n    var els;\n\n    // turn off all of the active tabs\n    els = document.querySelectorAll('#sg-' + patternPartial + '-tabs li');\n    for (var i = 0; i < els.length; ++i) {\n      els[i].classList.remove('sg-tab-title-active');\n    }\n\n    // hide all of the panels\n    els = document.querySelectorAll('#sg-' + patternPartial + '-panels div.sg-tabs-panel');\n    for (var i = 0; i < els.length; ++i) {\n      els[i].style.display = 'none';\n    }\n\n    // add active tab class\n    document.getElementById('sg-' + patternPartial + '-' + panelID + '-tab').classList.add('sg-tab-title-active');\n\n    // show the panel\n    document.getElementById('sg-' + patternPartial + '-' + panelID + '-panel').style.display = 'flex';\n  }\n\n};\n\nmodule.exports = panelsUtil;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/scripts/modules/panels-util/index.js\n// module id = 2\n// module chunks = 0 1","\"use strict\";\n\n/*!\n * Basic postMessage Support\n *\n * Copyright (c) 2013-2016 Dave Olsen, http://dmolsen.com\n * Licensed under the MIT license\n *\n * Handles the postMessage stuff in the pattern, view-all, and style guide templates.\n *\n */\n\n// alert the iframe parent that the pattern has loaded assuming this view was loaded in an iframe\nif (self != top) {\n\n  // handle the options that could be sent to the parent window\n  //   - all get path\n  //   - pattern & view all get a pattern partial, styleguide gets all\n  //   - pattern shares lineage\n  var path = window.location.toString();\n  var parts = path.split(\"?\");\n  var options = { \"event\": \"patternLab.pageLoad\", \"path\": parts[0] };\n\n  var patternData = document.getElementById('sg-pattern-data-footer').innerHTML;\n  patternData = JSON.parse(patternData);\n  options.patternpartial = patternData.patternPartial !== undefined ? patternData.patternPartial : \"all\";\n  if (patternData.lineage !== \"\") {\n    options.lineage = patternData.lineage;\n  }\n\n  var targetOrigin = window.location.protocol == \"file:\" ? \"*\" : window.location.protocol + \"//\" + window.location.host;\n  parent.postMessage(options, targetOrigin);\n\n  // find all links and add an onclick handler for replacing the iframe address so the history works\n  var aTags = document.getElementsByTagName('a');\n  for (var i = 0; i < aTags.length; i++) {\n    aTags[i].onclick = function (e) {\n      var href = this.getAttribute(\"href\");\n      var target = this.getAttribute(\"target\");\n      if (target !== undefined && (target == \"_parent\" || target == \"_blank\")) {\n        // just do normal stuff\n      } else if (href && href !== \"#\") {\n        e.preventDefault();\n        window.location.replace(href);\n      } else {\n        e.preventDefault();\n        return false;\n      }\n    };\n  }\n}\n\n// watch the iframe source so that it can be sent back to everyone else.\nfunction receiveIframeMessage(event) {\n\n  // does the origin sending the message match the current host? if not dev/null the request\n  if (window.location.protocol != \"file:\" && event.origin !== window.location.protocol + \"//\" + window.location.host) {\n    return;\n  }\n\n  var path;\n  var data = {};\n  try {\n    data = typeof event.data !== 'string' ? event.data : JSON.parse(event.data);\n  } catch (e) {}\n\n  if (data.event !== undefined && data.event == \"patternLab.updatePath\") {\n\n    if (patternData.patternPartial !== undefined) {\n\n      // handle patterns and the view all page\n      var re = /(patterns|snapshots)\\/(.*)$/;\n      path = window.location.protocol + \"//\" + window.location.host + window.location.pathname.replace(re, '') + data.path + '?' + Date.now();\n      window.location.replace(path);\n    } else {\n\n      // handle the style guide\n      path = window.location.protocol + \"//\" + window.location.host + window.location.pathname.replace(\"styleguide\\/html\\/styleguide.html\", \"\") + data.path + '?' + Date.now();\n      window.location.replace(path);\n    }\n  } else if (data.event !== undefined && data.event == \"patternLab.reload\") {\n\n    // reload the location if there was a message to do so\n    window.location.reload();\n  }\n}\nwindow.addEventListener(\"message\", receiveIframeMessage, false);\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/scripts/libs/postmessage/index.js\n// module id = 3\n// module chunks = 0 1"],"mappings":";AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;A;;;;;;AC7DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AC/MA;AACA;AACA;AACA;AACA;;;;;;;;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACvPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACnEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;A","sourceRoot":""}